/*
 * File: app/view/pnlLugar.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('reservas_puce.view.pnlLugar', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.pnllugar',

    requires: [
        'reservas_puce.view.pnlLugarViewModel',
        'reservas_puce.view.pnlLugarViewController',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.column.Number',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Ext.grid.column.Date',
        'Ext.grid.plugin.RowEditing'
    ],

    controller: 'pnllugar',
    viewModel: {
        type: 'pnllugar'
    },
    layout: 'fit',
    title: 'Lugar',

    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            items: [
                {
                    xtype: 'button',
                    id: 'btnLugarNuevo',
                    text: 'Nuevo',
                    listeners: {
                        click: 'onBtnLugarNuevoClick'
                    }
                },
                {
                    xtype: 'button',
                    id: 'btnLugarEliminar',
                    text: 'Eliminar',
                    listeners: {
                        click: 'onBtnLugarEliminarClick'
                    }
                }
            ]
        }
    ],
    items: [
        {
            xtype: 'gridpanel',
            id: 'grdLugar',
            title: '',
            forceFit: true,
            store: 'Lugar',
            columns: [
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    dataIndex: 'id',
                    text: 'ID'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'descripcion',
                    text: 'Descripcion',
                    editor: {
                        xtype: 'textfield'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(view)
                        {
                            var descripcion = record.data.Estado;
                            var combo = metaData.column.getEditor();
                            var comboStore = combo.getStore();
                            var indice = comboStore.findExact(combo.valueField, value);

                            if (indice >= 0)
                            return comboStore.getAt(indice).get(combo.displayField);
                            else
                            {
                                console.log(descripcion);
                                return descripcion;
                            }
                        }
                        else
                        return null;
                    },
                    dataIndex: 'id_estado',
                    text: 'Estado',
                    editor: {
                        xtype: 'combobox',
                        allowBlank: false,
                        editable: false,
                        displayField: 'descripcion',
                        queryMode: 'local',
                        store: 'Estado',
                        valueField: 'id'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'aforo',
                    text: 'Aforo',
                    format: '0,000',
                    editor: {
                        xtype: 'numberfield',
                        minValue: 0
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(view)
                        {
                            var descripcion = record.data.Tipo;
                            var combo = metaData.column.getEditor();
                            var comboStore = combo.getStore();
                            var indice = comboStore.findExact(combo.valueField, value);

                            if (indice >= 0)
                            return comboStore.getAt(indice).get(combo.displayField);
                            else
                            {
                                console.log(descripcion);
                                return descripcion;
                            }
                        }
                        else
                        return null;
                    },
                    dataIndex: 'id_tipo',
                    text: 'Tipo',
                    editor: {
                        xtype: 'combobox',
                        allowBlank: false,
                        editable: false,
                        displayField: 'descripcion',
                        queryMode: 'local',
                        store: 'Tipo',
                        valueField: 'id'
                    }
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        if(view)
                        {
                            var descripcion = record.data.Lugar;
                            var combo = metaData.column.getEditor();
                            var comboStore = combo.getStore();
                            var indice = comboStore.findExact(combo.valueField, value);

                            if (indice >= 0)
                            return comboStore.getAt(indice).get(combo.displayField);
                            else
                            {
                                console.log(descripcion);
                                return descripcion;
                            }
                        }
                        else
                        return null;
                    },
                    dataIndex: 'id_lugar',
                    text: 'Lugar',
                    editor: {
                        xtype: 'combobox',
                        allowBlank: false,
                        editable: false,
                        displayField: 'descripcion',
                        queryMode: 'local',
                        store: 'Lugar',
                        valueField: 'id'
                    }
                },
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'nivel',
                    text: 'Nivel',
                    format: '0,000',
                    editor: {
                        xtype: 'numberfield',
                        minValue: 0
                    }
                },
                {
                    xtype: 'datecolumn',
                    hidden: true,
                    dataIndex: 'hora_inicio',
                    text: 'Hora Inicio',
                    format: 'm/j/Y'
                },
                {
                    xtype: 'datecolumn',
                    hidden: true,
                    dataIndex: 'hora_fin',
                    text: 'Hora Fin',
                    format: 'm/j/Y'
                },
                {
                    xtype: 'numbercolumn',
                    hidden: true,
                    dataIndex: 'intervalo',
                    text: 'Intervalo'
                }
            ],
            plugins: [
                {
                    ptype: 'rowediting',
                    listeners: {
                        edit: 'onRowEditingEdit'
                    }
                }
            ]
        }
    ]

});